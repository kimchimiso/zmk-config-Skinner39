#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hold_key_tap_toggle: hold_key_tap_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_KEY_TAP_TOGGLE";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mouse_left_click {
            bindings = <&mkp LCLK>;
            key-positions = <16 37>;
        };

        mouse_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <17 37>;
        };

        mouse_right_click {
            bindings = <&mkp RCLK>;
            key-positions = <18 37>;
        };

        mouse_scroll_up {
            bindings = <&msc MOVE_Y(-20)>;
            key-positions = <7 36>;
        };

        mouse_scoll_down {
            bindings = <&msc MOVE_Y(20)>;
            key-positions = <17 36>;
        };

        mouse_scroll_left {
            bindings = <&msc MOVE_X(20)>;
            key-positions = <16 37>;
        };

        mouse_scroll_right {
            bindings = <&msc MOVE_X(-20)>;
            key-positions = <37 18>;
        };

        cursor_up {
            bindings = <&kp UP>;
            key-positions = <2 35>;
        };

        down_cursor {
            bindings = <&kp DOWN>;
            key-positions = <35 12>;
        };

        left_cursor {
            bindings = <&kp LEFT>;
            key-positions = <11 35>;
        };

        right_cursor {
            bindings = <&kp RIGHT>;
            key-positions = <13 35>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 35>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 34>;
        };

        mouse_previous {
            bindings = <&mkp MB4>;
            key-positions = <17 36>;
        };

        mouse_next {
            bindings = <&mkp MB5>;
            key-positions = <17 37>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <2 34>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <34 12>;
        };

        to_function_layer {
            bindings = <&mo 3>;
            key-positions = <37 34>;
        };

        japanese {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <37 18>;
        };

        english {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <34 11>;
        };

        Tab_shift {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 33>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q           &kp W         &kp E      &kp R        &kp T                                                   &kp Y          &kp U  &kp I      &kp O       &kp P
  &kp A           &kp S         &kp D      &kp F        &kp G                                                   &kp H          &kp J  &kp K      &kp L       &kp SEMI
  &kp Z           &kp X         &kp C      &kp V        &kp B                                                   &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL  &lt 1 SPACE  &lt 2 SPACE  &mt LEFT_SHIFT SPACE  &mt RIGHT_GUI ENTER  &kp BACKSPACE                                &kp MINUS
            >;
        };

        number {
            bindings = <
  &none         &kp SINGLE_QUOTE  &none         &none         &none                   &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp CARET  &kp AT_SIGN
  &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &kp NUMBER_4  &kp N5                  &kp NUMBER_6   &kp N7            &kp NUMBER_8       &kp N9     &kp N0
  &none         &none             &none         &none         &none                   &kp INT_YEN    &kp BACKSLASH     &trans             &trans     &kp PIPE
  &trans        &trans            &trans        &trans        &trans  &trans  &trans  &trans                                                         &kp TILDE
            >;
        };

        number+shift {
            bindings = <
  &none             &kp SINGLE_QUOTE   &none             &none             &none                       &kp EQUAL        &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &none           &kp GRAVE
  &kp LS(NUMBER_1)  &kp DOUBLE_QUOTES  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                  &kp AMPERSAND    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK    &kp COLON
  &none             &none              &none             &none             &none                       &kp LS(INT_YEN)  &kp LS(BACKSLASH)     &kp LS(COMMA)          &kp LS(PERIOD)  &kp LS(SLASH)
  &trans            &trans             &trans            &trans            &trans      &trans  &trans  &trans                                                                        &kp LS(MINUS)
            >;
        };

        function {
            bindings = <
  &none    &none    &none   &none   &none                       &none   &none   &none   &none   &none
  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
  &kp F11  &kp F12  &none   &none   &bt BT_CLR                  &none   &none   &none   &none   &none
  &trans   &trans   &trans  &trans  &trans      &trans  &trans  &trans                          &none
            >;
        };

        empty_1 {
            bindings = <
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                         &trans
            >;
        };

        layer_5_mouse_scroll {
            bindings = <
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                         &trans
            >;
        };

        layer_6_mouse_slow {
            bindings = <
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &none   &none   &none
  &none   &none   &none   &none   &none                   &none   &none  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                         &trans
            >;
        };
    };
};
